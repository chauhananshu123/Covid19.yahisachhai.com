{"version":3,"sources":["Context/StateContext.js","Components/Header.js","Context/actio.type.js","Components/SubCompo/StateCard.js","Components/Hero.js","Components/Footer.js","Components/SubCompo/DistrictCard.js","Components/District.js","Context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","React","createContext","Header","useState","Date","toLocaleString","time","useContext","StateView","dispatch","useEffect","reactGa","initialize","pageview","window","location","pathname","search","RemoveState","type","payload","className","to","onClick","data-toggle","data-target","id","href","length","map","value","i","Maindata","StateCard","stateData","StData","MainStData","key","state","todayCases","cases","parseInt","recovered","deaths","todayRecovered","todayDeaths","Hero","setStateData","loading","setLoading","axios","url","method","data","query","then","result","allState","country","states","catch","error","console","log","src","alt","height","width","Footer","DistrictCard","State","districtData","newVla","district","active","District","dist","useParams","SetDistrictData","SetLoading","mainValue","filter","obj","districts","v4","updateState","action","NOTFOUND","App","useReducer","reducer","Provider","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4052ae3a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const StateContext = React.createContext();","import React,{useState,useEffect,useContext} from 'react';\nimport {Link} from 'react-router-dom';\nimport  reactGa from 'react-ga';\nimport {StateContext} from '../Context/StateContext';\nimport {Remove} from '../Context/actio.type';\n\n\nconst Header = () => {\n    const [time, SetTime] = useState( new Date().toLocaleString());\n    const {StateView, dispatch}  = useContext(StateContext);\n   \n   \n   useEffect(()=>{\n       reactGa.initialize(\"UA-164810903-1\");\n\n     //  reactGa.pageview('/');\n         reactGa.pageview(window.location.pathname + window.location.search);\n\n   },[]);\n   const RemoveState = ()=>{\n        dispatch({\n            type : Remove,\n            payload : \"\"\n        })\n   }\n\n    return (\n        <div className=\"row\">\n      \n            <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n                <Link to=\"/\" className=\"navbar-brand\" onClick={RemoveState}>COVID-19-INDIA</Link>\n                <button type=\"button\" className=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                    <div className=\"navbar-nav\">\n                        <Link to=\"/\" className=\"nav-item nav-link active\" onClick={RemoveState}>Home</Link>\n                        <a href=\"#\" className=\"nav-item nav-link \" > {time} </a>\n                        <a href=\"#\" className=\"nav-item nav-link \" id=\"StateValue\" > { StateView.length === 0 ? \"\" :\n                         StateView.map((value,i)=>(\n                             value.Maindata\n                         ))\n                         } </a>\n                    </div>\n                   \n                </div>\n            </nav>\n   \n        </div>\n    )\n}\n\nexport default Header;","export const Add = \"add\";\nexport const Remove = 'remove';","import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\n\n\nconst StateCard = ({ stateData }) => {\n    \n    return (\n        <> {\n            stateData.map((StData, i) => (\n                StData.map((MainStData, i) => (\n\n                    <div className=\"col-sm-4 \" key={i} >\n                        <div className=\"card mt-4 mb-4\" >\n                            <div className=\"card-body\" id={`repetMe`+i}>\n                                <h5 className=\"card-title main_title\">{MainStData.state}</h5>\n                                <table>\n                                    <tbody>\n                                        <tr>\n                                            <td className=\"text-danger\">Confirmed</td>\n                                            <td className=\"text-primary\">Active</td>\n                                            <td className=\"text-success\">Recovered</td>\n                                            <td className=\"deacead\">Deceased</td>\n                                        </tr>\n                                        <tr>\n                                            <td className=\"main_confirmed_oo\"> <span className=\"text-danger main_confirmed\">+ {MainStData.todayCases}</span><br /><b> {MainStData.cases}</b></td>\n                                            <td className=\"main_confirmed_oo\" id={`main_c`+i}> <span className=\"make_white\"> . </span> <br></br>{parseInt(MainStData.cases) - parseInt(MainStData.recovered) - parseInt(MainStData.deaths)}</td>\n                                            <td className=\"main_confirmed_oo\" id={`main_d`+i}> <span className=\"text-success main_confirmed\">+ {MainStData.todayRecovered}</span><br /> {MainStData.recovered}</td>\n                                            <td className=\"main_confirmed_oo\"> <span className=\"text-dark main_confirmed\">+ {MainStData.todayDeaths}</span> <br /> {MainStData.deaths}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                                <p className=\"text-center\" id={ `show_district`+i } > <Link to={\"/distric/\"+MainStData.state}  className=\"btn btn-primary btn_dist\"  > View-district-wise </Link></p>\n                            </div>\n                        </div>\n                    </div>\n                ))\n\n            ))\n        }\n\n        </>\n    )\n}\nexport default StateCard;","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport StateCard from './SubCompo/StateCard';\n\n\n\nconst Hero = () => {\n    const [stateData, setStateData] = useState([])\n    const [loading, setLoading] = useState(true);\n   // document.getElementById(\"StateValue\").innerHTML = \"\";\n\n    useEffect(() => {\n        axios({\n            url: 'https://covidstat.info/graphql',\n            method: 'post',\n            data: {\n                query: `\n              query {\n                country(name: \"India\") {\n                  states {\n                    state\n                    cases\n                    deaths\n                    recovered\n                    tests\n                    todayCases\n                    todayDeaths\n                    todayRecovered\n                  }\n                }\n              }\n              \n                `\n            }\n        }).then((result) => {\n            const allState = result.data.data.country.states\n            setStateData([...stateData, allState]);\n            setLoading(false)\n\n        }).catch((error) => {\n            console.log(error)\n        })\n\n    }, [])\n\n\n\n    return (\n        <>\n           {\n               loading === true ? <div>\n               <img src=\"https://media.giphy.com/media/swhRkVYLJDrCE/giphy.gif\" alt=\"\" height=\"590\" width=\"100%\" />\n              </div> : \n               <div className=\"row Hero_eor\">\n               <StateCard stateData={stateData} />\n         </div>\n           }\n       \n     </>\n\n    )\n}\n\nexport default Hero;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst Footer = () => {\n    return (\n        <>\n\n            <footer className=\"page-footer font-small footer\">\n\n                <div className=\"footer-copyright text-center py-3\">© 2020 Copyright :\n                    <Link to=\"#\" className=\"footer_link\"> Covid-19 | Yahi-sach-hai | Ens</Link>\n                </div>\n\n\n            </footer>\n\n        </>\n    )\n}\nexport default Footer;","import React from 'react';\n\n\nconst DistrictCard = ({State,districtData})=>{\n // var MainData = []\n  // console.log(districtData)\n  \n // document.getElementById(\"StateValue\").innerHTML = State;\n  \n    return(\n        <>\n         \n         {\n               districtData.map((newVla,i)=>(\n               \n          \n         \n          <div className=\"col-sm-4 \" key={i}  >\n                    <div className=\"card mt-4 mb-4\" >\n                        <div className=\"card-body\" id=\"repetMe\">\n                            <h5 className=\"card-title main_title\">{newVla.district}</h5>\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td className=\"text-danger\">Confirmed</td>\n                                        <td className=\"text-primary\">Active</td>\n                                        <td className=\"text-success\">Recovered</td>\n                                        <td className=\"deacead\">Deceased</td>\n                                    </tr>\n                                    <tr>\n                                        <td className=\"main_confirmed_oo\"> <span className=\"text-danger main_confirmed\">+ {newVla.todayCases} </span><br /><b> {newVla.cases} </b></td>\n                                        <td className=\"main_confirmed_oo\"> <span className=\"make_white\"> . </span> <br></br> {newVla.active} </td>\n                                        <td className=\"main_confirmed_oo\"> <span className=\"text-success main_confirmed\">+ {newVla.todayRecovered} </span><br /> {newVla.recovered} </td>\n                                        <td className=\"main_confirmed_oo\"> <span className=\"text-dark main_confirmed\">+ {newVla.todayDeaths} </span> <br /> {newVla.deaths} </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                          \n                        </div>\n                    </div>\n                </div>\n        ))\n         }          \n\n        </>\n    )\n}\n\nexport default DistrictCard;","import React, { useEffect,useState,useContext} from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport DistrictCard from './SubCompo/DistrictCard';\nimport {StateContext} from '../Context/StateContext';\nimport {Add} from '../Context/actio.type';\nimport  {v4} from 'uuid';\n\nconst District = () => {\n    const { dist } = useParams();\n    const [districtData, SetDistrictData] = useState([]);\n    const [loading, SetLoading] = useState(true);\n    const {dispatch} = useContext(StateContext);\n    const updateState = ()=>{\n          const data = {\n            Maindata : dist,\n            id : v4()\n          }\n         dispatch({\n           type : Add,\n           payload : data\n         })\n    }\n   \n    const districtGrapgql = ()=>{\n      axios({\n        url: 'https://covidstat.info/graphql',\n        method: 'post',\n        data: {\n            query: `\n            query {\n                country(name: \"India\") {\n                  states {\n                    state\n                    districts {\n                      district\n                      cases\n                      todayCases\n                      deaths\n                      todayDeaths\n                      recovered\n                      todayRecovered\n                      active\n                    }\n                  }\n                }\n              }\n          \n            `\n        }\n    }).then((result) => {\n        const allDistrict = result.data.data.country.states\n     var mainValue =  allDistrict.filter(obj=>{\n            return obj.state === dist;\n        })\n        SetDistrictData(mainValue[0].districts)\n       //console.log(mainValue[0].districts)\n       SetLoading(false);\n   \n\n    }).catch((error) => {\n        console.log(error)\n    })\n    }\n    useEffect(() => {\n      districtGrapgql();\n      updateState();\n\n    }, [])\n   \n\n    return (\n        <>\n            {\n               loading === true ? <div>\n               <img src=\"https://media.giphy.com/media/swhRkVYLJDrCE/giphy.gif\" alt=\"\" height=\"590\" width=\"100%\" />\n              </div> :\n              <div className=\"row Hero_eor\">\n                <DistrictCard State={dist} districtData={districtData} />\n            </div>\n           }\n       \n            \n\n        </>\n    )\n}\nexport default District;","import {Add,Remove} from './actio.type';\n\nexport default (state,action)=>{\n           switch (action.type) {\n               case Add:\n                   return [action.payload];\n                case Remove:\n                    return [action.payload];\n               \n               default:\n                return state;\n           }\n}","import React,{useReducer} from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Hero from './Components/Hero';\nimport Footer from './Components/Footer';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport District from './Components/District';\nimport {StateContext} from './Context/StateContext';\nimport reducer from './Context/reducer';\n\nconst NOTFOUND = ()=>{\n  return (\n\n    <h1 className=\"err\"> 404 Error !</h1>\n  )\n}\n\nfunction App() {\n  const [StateView, dispatch]  = useReducer(reducer,[])\n \n  return (\n    <>\n    <Router>\n      <StateContext.Provider value={{StateView,dispatch}}  >\n    <Header/>\n    \n    <Switch>\n      <Route exact path=\"/\" component={Hero} />\n      <Route path=\"/distric/:dist\" component={District}/>\n      <Route path=\"*\"  component={NOTFOUND} />\n    </Switch>\n\n    <Footer/>\n    </StateContext.Provider>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}